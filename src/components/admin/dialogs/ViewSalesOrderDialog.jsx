import React, { useEffect, useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import apiClient from "@/services/api"; // ho·∫∑c ƒë∆∞·ªùng d·∫´n ƒë√∫ng

const ORDER_STATUSES = [
  { value: 0, label: "Ch·ªù x·ª≠ l√Ω" },
  { value: 1, label: "ƒê√£ x√°c nh·∫≠n" },
  { value: 2, label: "ƒêang giao" },
  { value: 3, label: "ƒê√£ giao" },
  { value: 4, label: "ƒê√£ h·ªßy" },
  { value: 5, label: "Th·∫•t b·∫°i" },
  { value: 6, label: "Qu√° h·∫°n" },
];

const getStatusLabel = (value) =>
  ORDER_STATUSES.find((s) => s.value === value)?.label || `Tr·∫°ng th√°i ${value}`;

const ViewSalesOrderDialog = ({ isOpen, onClose, order }) => {
  const [orderDetails, setOrderDetails] = useState([]);
  const [loadingDetails, setLoadingDetails] = useState(true);
  const [errorDetails, setErrorDetails] = useState(null);

  useEffect(() => {
    const id = order?.id || order?.OrderId; // ‚úÖ n·∫±m b√™n trong useEffect

    if (!id || !isOpen) return;

    const fetchDetails = async () => {
      setLoadingDetails(true);
      try {
        const response = await apiClient.get(`/admin/saleorders/${id}/details`);
        setOrderDetails(response.data);
        setErrorDetails(null);
      } catch (err) {
        console.error("Fetch error:", err);
        setErrorDetails("L·ªói khi t·∫£i chi ti·∫øt ƒë∆°n h√†ng");
      } finally {
        setLoadingDetails(false);
      }
    };

    fetchDetails();
  }, [order, isOpen]);

  if (!order) return null;

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(amount || 0);
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 0:
        return "bg-yellow-100 text-yellow-800";
      case 1:
        return "bg-blue-100 text-blue-800";
      case 2:
        return "bg-indigo-100 text-indigo-800";
      case 3:
        return "bg-green-100 text-green-800";
      case 4:
        return "bg-red-100 text-red-800";
      case 5:
        return "bg-red-200 text-red-900";
      case 6:
        return "bg-gray-300 text-gray-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl w-[90%] p-6 rounded-2xl my-8">
        <DialogHeader>
          <DialogTitle>
            üßæ Chi Ti·∫øt ƒê∆°n H√†ng #
            {order.orderNumber || order.id || order.OrderId}
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {/* Th√¥ng tin kh√°ch h√†ng */}
          <section>
            <h3 className="text-lg font-semibold text-muted-foreground mb-3">
              üë§ Th√¥ng Tin Kh√°ch H√†ng
            </h3>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <p className="text-muted">T√™n kh√°ch h√†ng</p>
                <p className="font-medium">{order.customerName}</p>
              </div>
              <div>
                <p className="text-muted">S·ªë ƒëi·ªán tho·∫°i</p>
                <p className="font-medium">{order.customerPhone}</p>
              </div>
              {/* <div>
                <p className="text-muted">Email</p>
                <p className="font-medium">{order.customerEmail || '-'}</p>
              </div> */}
              <div>
                <p className="text-muted">Tr·∫°ng th√°i</p>
                <Badge
                  className={`${getStatusColor(
                    order.status
                  )} font-medium px-3 py-1`}
                >
                  {getStatusLabel(order.status)}
                </Badge>
              </div>
            </div>
          </section>

          <Separator />

          {/* Th√¥ng tin ƒë∆°n h√†ng */}
          <section>
            <h3 className="text-lg font-semibold text-muted-foreground mb-3">
              üõí Th√¥ng Tin ƒê∆°n H√†ng
            </h3>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <p className="text-muted">Ng√†y ƒë·∫∑t</p>
                <p className="font-medium">
                  {new Date(order.orderDate).toLocaleDateString("vi-VN")}
                </p>
              </div>
              <div>
                <p className="text-muted">Ph∆∞∆°ng th·ª©c thanh to√°n</p>
                <p className="font-medium">
                  {order.paymentMethod || "Ti·ªÅn m·∫∑t"}
                </p>
              </div>
            </div>
          </section>
          <Separator />

          {/* ƒê·ªãa ch·ªâ giao h√†ng */}
          <section>
            <h3 className="text-lg font-semibold text-muted-foreground mb-3">
              üè† ƒê·ªãa Ch·ªâ Giao H√†ng
            </h3>
            <p className="text-sm text-gray-800">
              {order.shippingAddress || order.address}
            </p>
          </section>

          <Separator />

          {/* Danh s√°ch s·∫£n ph·∫©m */}
          <section>
            <h3 className="text-lg font-semibold text-muted-foreground mb-3">
              üìö Danh S√°ch S√°ch
            </h3>

            {loadingDetails ? (
              <p>ƒêang t·∫£i chi ti·∫øt ƒë∆°n h√†ng...</p>
            ) : errorDetails ? (
              <p className="text-red-500">{errorDetails}</p>
            ) : (
              <div className="space-y-3">
                {orderDetails.map((item, index) => (
                  <div
                    key={index}
                    className="flex justify-between items-center border border-gray-200 rounded p-3 bg-gray-50"
                  >
                    <div>
                      <p className="font-medium">{item.ProductName}</p>
                      <p className="text-sm text-muted">
                        S·ªë l∆∞·ª£ng: {item.Quantity}
                      </p>
                    </div>
                    <div className="text-right">
                      <p className="font-semibold text-primary">
                        {formatCurrency(item.UnitPrice)}
                      </p>
                      <p className="text-sm text-muted">
                        {formatCurrency(item.UnitPrice)} / cu·ªën
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </section>

          <Separator />

          {/* T·ªïng c·ªông */}
          <section>
            <h3 className="text-lg font-semibold text-muted-foreground mb-3">
              üí∞ T√≥m T·∫Øt Thanh To√°n
            </h3>
            <div className="text-sm space-y-2">
              <div className="flex justify-between">
                <span>Ti·ªÅn s√°ch:</span>
                <span>
                  {formatCurrency(
                    orderDetails.reduce(
                      (total, item) => total + item.UnitPrice * item.Quantity,
                      0
                    )
                  )}
                </span>
              </div>
              <div className="flex justify-between">
                <span>Gi·∫£m gi√°:</span>
                <span className="text-red-600">
                  -{formatCurrency(order.discountAmount || 0)}
                </span>
              </div>
              <div className="flex justify-between">
                <span>Ph√≠ v·∫≠n chuy·ªÉn:</span>
                <span>{formatCurrency(order.shippingFee || 0)}</span>
              </div>
              <div className="flex justify-between text-base font-bold border-t pt-2 mt-2">
                <span>T·ªïng c·ªông:</span>
                <span className="text-green-600">
                  {formatCurrency(order.totalAmount)}
                </span>
              </div>
            </div>
          </section>

          {/* Ghi ch√∫ */}
          {order.notes && (
            <>
              <Separator />
              <section>
                <h3 className="text-lg font-semibold text-muted-foreground mb-3">
                  üìù Ghi Ch√∫
                </h3>
                <p className="text-gray-800">{order.notes}</p>
              </section>
            </>
          )}

          {/* Footer */}
          <div className="flex justify-end pt-4">
            <Button variant="outline" onClick={onClose}>
              ƒê√≥ng
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default ViewSalesOrderDialog;
