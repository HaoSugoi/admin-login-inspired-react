
import { useState } from 'react';
import { useReportApi } from './useReportApi';

export const useStatsManagement = () => {
  const [activeSection, setActiveSection] = useState('stats');
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  
  // Sá»­ dá»¥ng API má»›i tá»« Backend
  const {
    overviewStats,
    dailySaleStats,
    monthlySaleStats,
    yearlySaleStats,
    dailyRentStats,
    monthlyRentStats,
    yearlyRentStats,
    isLoadingAny,
    hasError,
    refetchAllStats,
    setDailySaleDate,
    setMonthlySaleDate,
    setYearlySaleDate,
    setDailyRentDate,
    setMonthlyRentDate,
    setYearlyRentDate,
    isSettingDate
  } = useReportApi();

  // Xá»­ lÃ½ dá»¯ liá»‡u tá»« API má»›i
  const processedStatistics = {
    // Tá»•ng quan (tá»« overview vÃ  tá»•ng há»£p)
    totalRevenue: (overviewStats?.totalSaleBookValue || 0) + 
                  (dailyRentStats?.totalValueToday || 0) + 
                  (monthlyRentStats?.totalValueThisMonth || 0),
    totalOrders: (dailySaleStats?.ordersToday || 0) + (dailyRentStats?.ordersToday || 0),
    totalSaleBooks: overviewStats?.totalSaleBooks || 0,
    totalUsers: 245, // Mock data vÃ¬ chÆ°a cÃ³ trong API
    
    // Dá»¯ liá»‡u hÃ´m nay
    todayRevenue: (dailySaleStats?.totalValueToday || 0) + (dailyRentStats?.totalValueToday || 0),
    todayOrders: (dailySaleStats?.ordersToday || 0) + (dailyRentStats?.ordersToday || 0),
    
    // Dá»¯ liá»‡u thÃ¡ng nÃ y
    monthRevenue: (monthlySaleStats?.totalValueThisMonth || 0) + (monthlyRentStats?.totalValueThisMonth || 0),
    monthOrders: (monthlySaleStats?.ordersThisMonth || 0) + (monthlyRentStats?.ordersThisMonth || 0),
    
    // Dá»¯ liá»‡u nÄƒm nÃ y
    yearRevenue: (yearlySaleStats?.totalValueThisYear || 0) + (yearlyRentStats?.totalValueThisYear || 0),
    yearOrders: (yearlySaleStats?.ordersThisYear || 0) + (yearlyRentStats?.ordersThisYear || 0),
    
    // Dá»¯ liá»‡u cho biá»ƒu Ä‘á»“ (sá»­ dá»¥ng createdDates tá»« monthly stats)
    monthlyChartData: generateChartData(monthlySaleStats, monthlyRentStats),
    yearlyChartData: generateYearlyChartData(yearlySaleStats, yearlyRentStats)
  };

  // Generate chart data tá»« monthly statistics
  function generateChartData(saleStats, rentStats) {
    if (!saleStats?.createdDates || !rentStats?.createdDates) {
      return [
        { period: "NgÃ y 1", value: 0 },
        { period: "NgÃ y 7", value: 0 },
        { period: "NgÃ y 14", value: 0 },
        { period: "NgÃ y 21", value: 0 },
        { period: "NgÃ y 28", value: 0 }
      ];
    }

    // Táº¡o chart data tá»« createdDates
    const allDates = [...new Set([...saleStats.createdDates, ...rentStats.createdDates])].sort();
    
    return allDates.slice(0, 5).map((date, index) => ({
      period: `NgÃ y ${new Date(date).getDate()}`,
      value: Math.floor(Math.random() * 1000) + 500 // Mock value, cÃ³ thá»ƒ tÃ­nh toÃ¡n thá»±c táº¿
    }));
  }

  function generateYearlyChartData(saleStats, rentStats) {
    if (!saleStats?.createdDates || !rentStats?.createdDates) {
      return [
        { period: "ThÃ¡ng 1", value: 0 },
        { period: "ThÃ¡ng 2", value: 0 },
        { period: "ThÃ¡ng 3", value: 0 },
        { period: "ThÃ¡ng 4", value: 0 }
      ];
    }

    // Group by months
    const months = ['ThÃ¡ng 1', 'ThÃ¡ng 2', 'ThÃ¡ng 3', 'ThÃ¡ng 4', 'ThÃ¡ng 5', 'ThÃ¡ng 6'];
    return months.slice(0, 4).map((month, index) => ({
      period: month,
      value: Math.floor(Math.random() * 2000) + 800 // Mock value
    }));
  }

  // Log Ä‘á»ƒ debug
  console.log('ðŸ“‹ Stats Management Data:', {
    overviewStats,
    dailySaleStats,
    monthlySaleStats,
    yearlySaleStats,
    dailyRentStats,
    monthlyRentStats,
    yearlyRentStats,
    processedStatistics,
    isLoadingAny,
    hasError
  });

  const toggleSidebar = () => {
    setSidebarCollapsed(!sidebarCollapsed);
  };

  const handleLogout = () => {
    console.log('Logging out...');
  };

  const handleRefreshStats = () => {
    console.log('ðŸ”„ Refreshing all statistics...');
    refetchAllStats();
  };

  // Date setting functions
  const handleSetSaleDate = (period, date) => {
    const dateObj = new Date(date);
    
    switch (period) {
      case 'day':
        setDailySaleDate(dateObj.toISOString());
        break;
      case 'month':
        setMonthlySaleDate({
          year: dateObj.getFullYear(),
          month: dateObj.getMonth() + 1
        });
        break;
      case 'year':
        setYearlySaleDate(dateObj.getFullYear());
        break;
    }
  };

  const handleSetRentDate = (period, date) => {
    const dateObj = new Date(date);
    
    switch (period) {
      case 'day':
        setDailyRentDate(dateObj.toISOString());
        break;
      case 'month':
        setMonthlyRentDate({
          year: dateObj.getFullYear(),
          month: dateObj.getMonth() + 1
        });
        break;
      case 'year':
        setYearlyRentDate(dateObj.getFullYear());
        break;
    }
  };

  return {
    activeSection,
    setActiveSection,
    sidebarCollapsed,
    toggleSidebar,
    
    // Dá»¯ liá»‡u thá»‘ng kÃª Ä‘Ã£ xá»­ lÃ½
    statistics: processedStatistics,
    
    // Raw data tá»« API má»›i
    rawStats: {
      overview: overviewStats,
      dailySale: dailySaleStats,
      monthlySale: monthlySaleStats,
      yearlySale: yearlySaleStats,
      dailyRent: dailyRentStats,
      monthlyRent: monthlyRentStats,
      yearlyRent: yearlyRentStats
    },
    
    // Loading vÃ  error states
    isLoading: isLoadingAny,
    error: hasError,
    isSettingDate,
    
    // Actions
    handleLogout,
    handleRefreshStats,
    handleSetSaleDate,
    handleSetRentDate
  };
};
