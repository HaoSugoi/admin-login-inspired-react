
// src/services/authorService.js
import apiClient from './api';

export const authorService = {
  getAllAuthors: async () => {
    try {
      console.log("üîÑ Fetching all authors...");
      const response = await apiClient.get('/Author');
      console.log("‚úÖ Authors fetched successfully:", response.data);
      
      return response.data.map(author => ({
        AuthorId: author.AuthorId,
        Name: author.Name,
        Description: author.Description,
        BooksCount: author.BooksCount || 0
      }));
    } catch (error) {
      console.error('‚ùå Error fetching authors:', error);
      console.error('Error details:', {
        status: error.response?.status,
        data: error.response?.data,
        message: error.message
      });
      throw error;
    }
  },

  createAuthor: async (authorData) => {
    try {
      console.log("üîÑ Creating author with data:", authorData);
      
      // Validate input data
      if (!authorData || !authorData.Name || authorData.Name.trim() === '') {
        throw new Error('T√™n t√°c gi·∫£ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
      }

      // T·∫°o payload ƒë√∫ng format
      const payload = {
        Name: authorData.Name.trim(),
        Description: authorData.Description ? authorData.Description.trim() : ""
      };
      
      console.log("üì§ CREATE payload:", JSON.stringify(payload, null, 2));
      console.log("üîó CREATE URL:", '/Author');
      
      // G·ª≠i request v·ªõi headers r√µ r√†ng
      const response = await apiClient.post('/Author', payload, {
        headers: {
          'Content-Type': 'application/json',
        }
      });
      
      console.log("‚úÖ Author created - Response:", response.data);
      console.log("‚úÖ Response status:", response.status);
      
      return {
        AuthorId: response.data.AuthorId,
        Name: response.data.Name,
        Description: response.data.Description,
        BooksCount: 0
      };
    } catch (error) {
      console.error('‚ùå CREATE Error:', error);
      console.error('‚ùå CREATE Error details:', {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message,
        url: error.config?.url,
        method: error.config?.method,
        sentData: error.config?.data,
        headers: error.config?.headers
      });
      
      if (error.response?.data?.message) {
        throw new Error(error.response.data.message);
      } else if (error.response?.status === 400) {
        throw new Error('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin.');
      } else if (error.response?.status === 500) {
        throw new Error('L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.');
      } else {
        throw new Error(error.message || 'Kh√¥ng th·ªÉ t·∫°o t√°c gi·∫£. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    }
  },

  updateAuthor: async (id, authorData) => {
    try {
      console.log('üîÑ Updating author with params:', { id, authorData });
      
      if (!id) {
        throw new Error('ID t√°c gi·∫£ kh√¥ng h·ª£p l·ªá');
      }
      
      if (!authorData || !authorData.Name || authorData.Name.trim() === '') {
        throw new Error('T√™n t√°c gi·∫£ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
      }

      // T·∫°o payload ƒë√∫ng format 
      const payload = {
        Name: authorData.Name.trim(),
        Description: authorData.Description ? authorData.Description.trim() : ""
      };
      
      console.log('üì§ UPDATE payload:', JSON.stringify(payload, null, 2));
      console.log('üîó UPDATE URL:', `/Author/${id}`);
      
      // G·ª≠i request v·ªõi headers r√µ r√†ng
      const response = await apiClient.put(`/Author/${id}`, payload, {
        headers: {
          'Content-Type': 'application/json',
        }
      });
      
      console.log('‚úÖ Author updated - Response:', response.data);
      console.log('‚úÖ Response status:', response.status);
      
      return response.data;
    } catch (error) {
      console.error('‚ùå UPDATE Error:', error);
      console.error('‚ùå UPDATE Error details:', {
        id,
        authorData,
        status: error.response?.status,
        statusText: error.response?.statusText,
        responseData: error.response?.data,
        message: error.message,
        url: error.config?.url,
        method: error.config?.method,
        sentData: error.config?.data,
        headers: error.config?.headers
      });
      
      if (error.response?.data?.message) {
        throw new Error(error.response.data.message);
      } else if (error.response?.status === 404) {
        throw new Error('Kh√¥ng t√¨m th·∫•y t√°c gi·∫£ ƒë·ªÉ c·∫≠p nh·∫≠t.');
      } else if (error.response?.status === 400) {
        throw new Error('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin.');
      } else {
        throw new Error(error.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t t√°c gi·∫£. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    }
  },

  deleteAuthor: async (id) => {
    try {
      console.log('üîÑ Deleting author with id:', id);
      
      if (!id) {
        throw new Error('ID t√°c gi·∫£ kh√¥ng h·ª£p l·ªá');
      }
      
      console.log('üîó DELETE URL:', `/Author/${id}`);
      
      const response = await apiClient.delete(`/Author/${id}`);
      
      console.log('‚úÖ Author deleted - Response:', response);
      console.log('‚úÖ Response status:', response.status);
      
      return id;
    } catch (error) {
      console.error('‚ùå DELETE Error:', error);
      console.error('‚ùå DELETE Error details:', {
        id,
        status: error.response?.status,
        statusText: error.response?.statusText,
        responseData: error.response?.data,
        message: error.message,
        url: error.config?.url
      });
      
      if (error.response?.data?.message) {
        throw new Error(error.response.data.message);
      } else if (error.response?.status === 404) {
        throw new Error('Kh√¥ng t√¨m th·∫•y t√°c gi·∫£ ƒë·ªÉ x√≥a.');
      } else if (error.response?.status === 400) {
        throw new Error('Kh√¥ng th·ªÉ x√≥a t√°c gi·∫£ n√†y v√¨ c√≥ s√°ch li√™n quan.');
      } else {
        throw new Error(error.message || 'Kh√¥ng th·ªÉ x√≥a t√°c gi·∫£. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    }
  }
};
